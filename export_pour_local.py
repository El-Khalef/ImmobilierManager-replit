#!/usr/bin/env python3
"""
Script d'export pour installation locale
Cr√©e un export PostgreSQL compatible avec l'installation locale
"""

import os
import subprocess
import sys
from datetime import datetime

def creer_export_local():
    """Cr√©e un export de la base de donn√©es pour l'installation locale"""
    
    print("üîÑ Cr√©ation de l'export pour installation locale...")
    
    # G√©n√©rer le nom du fichier avec timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    export_file = f"export_pour_local_{timestamp}.sql"
    
    try:
        # URL de la base de donn√©es depuis les variables d'environnement
        database_url = os.environ.get('DATABASE_URL')
        
        if not database_url:
            print("‚ùå Erreur : DATABASE_URL non trouv√©e dans les variables d'environnement")
            return False
        
        print(f"üìä Export de la base de donn√©es...")
        print(f"üìÅ Fichier de sortie : {export_file}")
        
        # Commande pg_dump avec options pour la compatibilit√© locale
        cmd = [
            'pg_dump',
            database_url,
            '--clean',                    # Nettoyer avant cr√©ation
            '--if-exists',               # √âviter les erreurs si tables n'existent pas
            '--no-owner',                # Pas de propri√©taire sp√©cifique
            '--no-privileges',           # Pas de privil√®ges sp√©cifiques
            '--verbose',                 # Mode verbeux
            '--file', export_file        # Fichier de sortie
        ]
        
        # Ex√©cuter la commande
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ Export cr√©√© avec succ√®s : {export_file}")
            
            # Afficher la taille du fichier
            try:
                file_size = os.path.getsize(export_file)
                print(f"üìä Taille du fichier : {file_size / 1024:.1f} KB")
            except:
                pass
            
            print("\nüìã Instructions pour l'installation locale :")
            print("1. T√©l√©chargez ce fichier depuis Replit")
            print("2. Suivez le guide INSTALLATION_LOCALE.md")
            print("3. Importez avec : psql -U immobilier_user -d gestion_immobiliere -f " + export_file)
            
            return True
        else:
            print(f"‚ùå Erreur lors de l'export :")
            print(f"Code de retour : {result.returncode}")
            print(f"Erreur : {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {str(e)}")
        return False

def verifier_donnees():
    """V√©rifie les donn√©es avant export"""
    try:
        from app import app, db
        from models import Client, BienImmobilier, ContratLocation, PaiementLoyer, CompteComptable, EcritureComptable
        
        with app.app_context():
            stats = {
                'Clients': Client.query.count(),
                'Biens immobiliers': BienImmobilier.query.count(),
                'Contrats': ContratLocation.query.count(),
                'Paiements': PaiementLoyer.query.count(),
                'Comptes comptables': CompteComptable.query.count(),
                '√âcritures comptables': EcritureComptable.query.count(),
            }
            
            print("üìä Statistiques des donn√©es √† exporter :")
            for nom, count in stats.items():
                print(f"   ‚Ä¢ {nom}: {count}")
            
            total = sum(stats.values())
            print(f"\nüìà Total des enregistrements : {total}")
            
            if total == 0:
                print("‚ö†Ô∏è  Attention : Aucune donn√©e trouv√©e √† exporter")
                return False
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification : {str(e)}")
        return False

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üè† EXPORT POUR INSTALLATION LOCALE")
    print("   Syst√®me de Gestion Immobili√®re")
    print("=" * 60)
    
    # V√©rifier les donn√©es
    if not verifier_donnees():
        print("‚ùå Impossible de continuer sans donn√©es valides")
        return
    
    # Demander confirmation
    print("\n‚ùì Voulez-vous cr√©er l'export pour l'installation locale ? (o/n)")
    response = input().lower().strip()
    
    if response in ['o', 'oui', 'y', 'yes']:
        success = creer_export_local()
        
        if success:
            print("\n‚úÖ Export termin√© avec succ√®s !")
            print("üì• T√©l√©chargez le fichier .sql cr√©√©")
            print("üìñ Consultez INSTALLATION_LOCALE.md pour la suite")
        else:
            print("\n‚ùå L'export a √©chou√©")
            print("üîç V√©rifiez les logs ci-dessus pour plus de d√©tails")
    else:
        print("‚ùå Export annul√©")

if __name__ == "__main__":
    main()